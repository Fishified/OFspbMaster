/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//1. Make sure the distances between coordinate variables (i.e. zMin, yA, etc.) are divisible by the cell size
//2. It is important to build the blocks and model (i.e. geometry imports) around the desired upstream and downstream water surface levels
//   otherwise, you might have to choose too fine of cellsize which may or may not be a problem


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


convertToMeters 1;

xMin   0.0; 
xMax  6.0;

yA  -0.2; 
yB  0.2; 

zMin     -0.06;  
zMax     0.3;

cellsize 0.02;

nbDirX       #calc "floor((($xMax)-($xMin))/$cellsize)";
nbDirY       #calc "floor((($yB)-($yA))/$cellsize)";
nbDirZ   #calc "floor((($zMax)-($zMin))/$cellsize)";


//nbDirXAmont 200; //25; //150; 
//nbDirXAval  240; //30; //180; 
//nbDirY      1; //25; 
//nbDirZBas1  20; //3;  //15;
//nbDirZBas2  16; //3;  //24;
//nbDirZHaut1 44; //5;  //21;
//nbDirZHaut2 40; //5;  //30;

vertices
(
 ($xMin  $yA   $zMin    ) // 0
 ($xMin  $yB   $zMin    ) // 1
 ($xMin  $yB   $zMax    ) // 2
 ($xMin  $yA   $zMax    ) // 3

 ($xMax  $yA   $zMin    ) // 4
 ($xMax  $yB   $zMin    ) // 5
 ($xMax  $yB   $zMax    ) // 6
 ($xMax  $yA   $zMax    ) // 7

);

blocks
(
 hex (0 4 5 1 3 7 6 2) ($nbDirX $nbDirY $nbDirZ)   simpleGrading (1 1 1)

);

edges
(
);

boundary
(
    upstream
    {
        type patch;
        faces
        (
            (0 3 2 1)
        );
    }
    
    downstream
    {
        type patch;
        faces
        (
            (5 6 7 4)
        );
    }
    
    leftWall
    {
        type wall;
        faces
        (
            (1 2 6 5)
        );
    }
    
    rightWall
    {
        type wall;
        faces
        (
	    (4 7 3 0)
        );
    }
    
    top
    {
        type wall;
        faces
        (
            (3 7 6 2)
        );
    }
    
    bottom
    {
        type wall;
        faces
        (
            (0 1 5 4)
        );
    }
    

);
    

mergePatchPairs
(
);
